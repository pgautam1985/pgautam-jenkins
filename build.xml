<?xml version="1.0" encoding="UTF-8"?>
<!-- **Phing Drupal Template** is a XML build file for the
**[Phing build system](http://www.phing.info/trac/)** with targets and
configuration designed for **[Drupal](http://drupal.org)** projects.

The aim of the project is to provide a build file which can be used with a
contiuous integration server to ensure clean code - check for compilation
errors, run unit tests, lint code and verify that code standards are upheld.

The template has been developed with the
[Jenkins job template for Drupal projects](http://reload.github.com/jenkins-drupal-template)
and the [Drupal Jenkins demo](http://github.com/kasperg/drupal-jenkins-demo).
It may work with other continuous integration systems.

### Usage

The template can be used in several ways:

* As a starting point for your own build files. Download
[`build.xml`](https://raw.github.com/reload/phing-drupal-template/master/build.xml)
to the root directory of your Drupal project and modify it as needed.

* As the actual build file for your project. You can configure most aspects of
the build according to your project through a properties file. This works
whether you have your entire Drupal project in VCS or use
[drush_make](http://drupal.org/project/drush_make). Download the entire
project and place it in a subfolder or use it as a
[git submodule](http://kernel.org/pub/software/scm/git/docs/git-submodule.html).
Using the `build` subfolder from the root directory is recommended. Copy the
`build.default.properties` file to the root directory, rename it
`build.properties` and modify it according to your project. Leave out
properties where you want to use the default values.

### Requirements

Using the template requires a range of PEAR packages present. They can be
installed as follows:

pear channel-discover pear.phing.info
pear channel-discover pear.pdepend.org
pear channel-discover pear.phpmd.org
pear channel-discover pear.phpunit.de
pear channel-discover components.ez.no
pear channel-discover pear.symfony-project.com

pear install phing/phing
pear install -a phpmd/PHP_PMD
pear install phpunit/phpcpd
pear install phpunit/phploc
pear install PHPDocumentor
pear install PHP_CodeSniffer
pear install HTTP_Request2
pear install -a phpunit/PHP_CodeBrowser

The following must be available from the command line:

* [Drush](http://drupal.org/project/drush): The Drupal shell.
[Installation instructions](http://drupalcode.org/project/drush.git/blob/HEAD:/README.txt).
* PHP 5.2.7 or newer with sqlite extension
* Java Runtime Environment

### Credits

The build file is heavily inspired by Sebastian Bergmans wonderful [template
for Jenkins Jobs for PHP Projects](http://jenkins-php.org/) and began as a
Phing port of his suggested Apache Ant build file.

Many of the same tools are used: [phploc](http://sebastianbergmann.github.com/phploc/),
[phpcpd](https://github.com/sebastianbergmann/phpcpd),
[PHPMD](http://phpmd.org/), [phpDocumentor](http://www.phpdoc.org/) and [PHP_CodeBrowser](https://github.com/Mayflower/PHP_CodeBrowser).

A couple of additional external tools are downloaded and used during the
build process:

* [Phing Drush Task](http://drupal.org/project/phingdrushtask):
A custom task for running drush from Phing
* [Phing PHPLoc](https://github.com/raphaelstolt/phploc-phing): A custom task
for running phploc from Phing
* [jslint4java](http://jslint4java.googlecode.com/): Supports execution of
jslint from the command line
* [jslintÂ´](https://github.com/mikewest/JSLint): A more humane version of
Douglas Crockfords JSLint.
* [csslint](http://csslint.net): A tool to help point out problems with CSS code.
* [Mozilla Rhino](http://www.mozilla.org/rhino/download.html): An implementation of Javascript in Java.
* [Coder](http://drupal.org/project/coder): Drupal module for
performing code reviews.

This documentation has been generated by
[phrocco](https://github.com/oneblackbear/phrocco)
- a PHP port of the literate documentation generator Docco.

### Contributors

The Phing Drupal template is developed by [Reload!](http://reload.dk) - a Drupal development agency located in Copenhagen, Denmark.

Drush Make and Simpletest support has been sponsored by [DBC](http://www.dbc.dk/).

<a href="http://github.com/reload/phing-drupal-template">
<img style="position: absolute; top: 0; right: 0; border: 0;" src="https://a248.e.akamai.net/assets.github.com/img/30f550e0d38ceb6ef5b81500c64d970b7fb0f028/687474703a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6f72616e67655f6666373630302e706e67" alt="Fork me on GitHub">
</a>
-->

<project name="phing-drupal" default="build" phingVersion="2.4.11">

<!-- ## Main targets -->

<!-- ### Build project

Do a complete build of the project by verifying code consistency and and
performing static analysis of the code.

This is the default build target.

Do not run `docs` for now. Generating documentation eats up memory and build
time and is largely obsolete when using GitHub. -->
  <target name="build" depends="init,
analyze,
security-review,
simpletest" />

<!-- ### Analyze code

Perform static analysis of the code to generate statistics, identify potential
problems and opportunities for refactorings and make sure that the code
complies with coding standards. -->
  <target name="analyze" depends="init">
    <!-- Moved inside target to support properties in target name -->
    <phingcall target="coder-review-d${drupal.version}">
      <!-- Run the target as if it was executed from the Drupal root
directory. -->
      <property name="project.basedir" value="${project.drupal.dir}"/>
      <!-- We already have a clean environment so avoid further cleaning. -->
      <property name="project.cleaned" value="1"/>
      <!-- Make will run again as a part of the `init` target. We already have
a working site so skip that. -->
      <!--<property name="project.make.skip" value="1"/> -->
    </phingcall>
  </target>


<!-- ### Drupal Coder review

Review code using [Drupal coder module](http://drupal.org/project/coder).

Configuration of which modules and themes to review is done in
`build.properties`. If your modules use a common prefix such as
`yourproject_module1`, `yourproject_module2` you can add all modules with a
specific prefix. -->
  <target name="coder-review-d6"
          description="Review code using Drupal 6 Coder module"
          depends="init">
    <echo level="warning">Coder Review is not supported for Drupal 6 yet.
                          Check http://drupal.org/node/858330 for
                          patches/updates.</echo>
  </target>

  <target name="coder-review-d7"
          description="Review code using Drupal 7 Coder module"
          depends="init, clean">
    <!-- Setup properties for running Coder Review.
For some reason these properties are not passed correctly through to
subtargets when defining them within the phingcall. -->
    <property name="coder.review.command" value="coder-review"/>

<!-- Execute code review using Code Sniffer. Place Drupal coding standards inside code sniffer -->

    <exec command="phpcs --standard=Drupal ${project.code.dir}/modules/fivestar/fivestar.module" logoutput="true" />

    <!-- Perform actual coder review for each style -->
    <!--<foreach target="coder-review" param="coder.review.type"
list="comment,i18n,security,sql,style" /> -->
  </target>
 
 
<!-- ### Run security review -->

<target name="security-review"
depends="setup-phing-drush">
<drush command="secrev" root="${project.drupal.dir}" />
</target>

  <!-- ### Run simpletests

Execution of this target can be skipped by setting the
`project.simpletest.skip` property from the command line or in other targets.
-->
  <target name="simpletest"
          description="Run all unit tests"
depends="setup-phing-drush"
          unless="project.simpletest.skip">
    <mkdir dir="${project.testdir}"/>
    <!-- Enable simpletest module. If using Drupal 6 the module will be
downloaded as well. -->
    <!--<phingcall target="enable-module">
<property name="module" value="simpletest"/>
</phingcall> -->

    <if>
      <isset property="drupal.uri" />
      <then>

        <!-- Get a list of all available test cases -->
        <drush command="test-run" uri="${drupal.uri}" root="${project.drupal.dir}" returnProperty="tests" returnGlue="${line.separator}"/>

        <!-- The project list is piped through a file as this seems to be
the only way to handle filtering of values in Phing. -->
        <delete file="${project.logdir}/tests.txt" />
        <append text="${tests}" destFile="${project.logdir}/tests.txt" />

        <!-- Build a regular expression to match test groups based on the
set properties. The expression should be in the format
`^\s?(prefix1|prefix2|prefix3)_`. -->
        <php expression="'^\s?(' . preg_replace('/(\s+|\s*,\s*)/', '|', '${project.code.prefix}') .').*'"
             returnProperty="project.code.prefix.regex"/>

        <!-- Load the list of tests but keep only the test groups matching our
prefixes. -->
        <loadfile property="project.simpletest.tests"
                  file="${project.logdir}/tests.txt">
          <filterchain>
            <linecontainsregexp>
              <regexp pattern="${project.code.prefix.regex}" ignoreCase="true"/>
            </linecontainsregexp>
          </filterchain>
        </loadfile>

        <!-- Transform the list of filtered test groups in the form

Groupname 1 Groupname 1
Groupname 2 Groupname 2

into a list of comma separated unique group names `Groupname 1,Groupname 2`. -->
        <php expression="implode(',', array_unique(preg_split('/(\s{2,}|\r|\n)/', trim('${project.simpletest.tests}', PREG_SPLIT_NO_EMPTY))))"
             returnProperty="project.simpletest.tests"/>

        <!-- Run the tests and generate JUnit XML reports. This requires
Drush 4.5 or newer or [a patch](http://drupal.org/node/1109408). -->

        <drush command="test-run UserAdminTestCase" uri="${drupal.uri}" root="${project.drupal.dir}" haltonerror="false">
          <param>${project.simpletest.tests}</param>
          <option name="xml">${project.testdir}</option>
          </drush>
      </then>
      <else>
        <echo msg="You must set the drupal.uri property to get simpletests working." />
      </else>
    </if>
    
  </target>




<!-- ## Helper targets

These targets are used throughout the project and should normally not be
executed directly.-->

<!-- ### Initialization

This target sets up many of the common resources used throughout the build.
All other targets except dependencies for this target should depend on this
unless specifically stated why. -->
  <target name="init"
          depends="load-properties, setup-dirs, setup-filesets"
          unless="project.initialized">
    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.initialized" value="true"/>
  </target>

<!-- ### Load properties

Loads a set of project specific properties from a `.properties` file.

These properties contain information regarding the individual project and/or
environment such as which version of Drupal you are using, how to create a
database and the names of your custom modules.

All available properties are described and set to a default value in
[`build.default.properties`](https://raw.github.com/reload/phing-drupal-template/master/build.default.properties).
You should create your own properties file by copying the
`build.default.properties` file to the root directory, rename it
`build.properties` and modify it according to your project.

Both property files are loaded so your custom `build.properties` file should
only contain properties where you want to override the default value e.g. set
your custom module code prefix or use a special version of one of the build
tools. -->
  <target name="load-properties">
    <php function="dirname" returnProperty="phing.dir">
      <param value="${phing.file}"/>
    </php>

    <property name="project.basedir" value="${phing.dir}" />

    <!-- Use condition instead of unless property as we cannot unset properties in Phing -->
    <if>
      <or>
        <!-- `istrue` evaluates to true is value is not set we need to check
`isset` as well -->
        <not><istrue value="${project.properties.loaded}" /></not>
        <not><isset property="project.properties.loaded" /></not>
      </or>
      <then>
<!-- By default Jenkins runs Phing from the directory containing the build
file. If this file is located in a subdirectory - e.g. when using Phing Drupal as a submodule - we need to reset the project basedir and reload properties.

NB: This only works if the subdirectory is directly within the Drupal
root directory. -->
        <if>
          <!-- If `build.properties` exists then assume we have a
project root directory -->
          <available file="${project.basedir}/../build.properties"/>
          <then>
            <resolvepath propertyName="project.basedir"
                         file="${project.basedir}/../"/>
          </then>
        </if>

        <!-- By default use default properties file
`build.default.properties` -->
        <property name="project.properties.file"
                  value="${phing.dir}/build.default.properties" />
        <!-- Load the default properties.
Override in case `load-properties` are called multiple times. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Allow override using `build.properties` in build file
directory -->
        <available file="${phing.dir}/build.properties"
                   property="project.properties.file"
                   value="${phing.dir}/build.properties" />
        <!-- Allow override using `build.properties` in project base
directory -->
        <available file="${project.basedir}/build.properties"
                   property="project.properties.file"
                   value="${project.basedir}/build.properties" />

        <!-- Load the overriding properties. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Set property to prevent unnecessary additional invocations of this target -->
        <property name="project.properties.loaded" value="true" />
      </then>
    </if>
  </target>

<!-- ### Setup directories

Define working directories - where the individual parts of the build are and
should be located. These are used in other targets.

This is part of the initialization of the build. This target should only be
called from `init` target. -->
  <target name="setup-dirs"
          depends="load-properties">
    
    <property name="project.drupal.dir"
                value="${project.basedir}/src" />
    <property name="project.sitesdir"
              value="${project.drupal.dir}/${project.code.dir}" />
    <property name="project.builddir"
              value="${project.basedir}/build" />
    <property name="project.toolsdir"
              value="${project.builddir}/tools" />
    <property name="project.coveragedir"
              value="${project.builddir}/coverage" />
    <property name="project.logdir"
              value="${project.builddir}/logs" />
    <property name="project.testdir"
              value="${project.builddir}/tests" />
  </target>


<!-- ### Setup file sets

Setup file sets - patterns for different aspects of the source code.
These are used in other targets.

This is part of the initialization of the build. This target should only be
called from `init` target. -->
  <target name="setup-filesets"
          depends="load-properties">
    <!-- Define pattern sets for future reference -->

    <!-- PHP files -->
    <patternset id="php">
      <include name="**/*.php" />
      <include name="**/*.module" />
      <include name="**/*.install" />
      <include name="**/*.inc" />
      <include name="**/*.profile" />
      <include name="**/*.test" />
    </patternset>

    <!-- Javascript files -->
    <patternset id="js">
      <include name="**/*.js" />
      <!-- Minimized JavaScript files should not be analyzed.
In their optimized state they can not be expexted
to conform to coding standards. -->
      <exclude name="**/*.min.js" />
    </patternset>

    <!-- CSS files -->
    <patternset id="css">
      <include name="**/*.css" />
    </patternset>

    <!-- Directories for community contributed code. We exclude these from
code analysis as we cannot be held responsible for any problems
here. -->
    <patternset id="contrib">
      <exclude name="**/contrib/**/*.*" />
      <exclude name="**/libraries/**/*.*" />
    </patternset>

    <!-- We exclude generated files from We exclude these from code analysis
as we cannot be held responsible for any problems here. -->
    <patternset id="generated">
      <exclude name="**/*.features.*" />
      <exclude name="**/*.field_group.inc" />
      <exclude name="**/*.layouts.inc" />
      <exclude name="**/*.pages_default.inc" />
      <exclude name="**/*.panels_default.inc" />
      <exclude name="**/*.strongarm.inc" />
      <exclude name="**/*.views_default.inc" />
    </patternset>

    <!-- Define file sets for future reference -->

    <!-- All PHP files -->
    <fileset id="src.php" dir="${project.drupal.dir}">
      <patternset refid="php"/>
    </fileset>

    <!-- Custom PHP files -->
    <fileset id="src.php.custom" dir="${project.sitesdir}">
      <patternset refid="php"/>
      <patternset refid="contrib"/>
      <patternset refid="generated"/>
    </fileset>

    <!-- All Javascript files -->
    <fileset id="src.js" dir="${project.drupal.dir}">
      <patternset refid="js" />
    </fileset>

    <!-- Custom Javascript files -->
    <fileset id="src.js.custom" dir="${project.sitesdir}">
      <patternset refid="js" />
      <patternset refid="contrib" />
    </fileset>

    <!-- All CSS files -->
    <fileset id="src.css" dir="${project.basedir}">
      <patternset refid="css" />
    </fileset>

    <!-- Custom CSS files -->
    <fileset id="src.css.custom" dir="${project.sitesdir}">
      <patternset refid="css" />
      <patternset refid="contrib" />
    </fileset>

  </target>

<!-- ### Clean working environment -->
  <target name="clean"
          description="Clean up and create artifact directories"
          depends="setup-dirs"
          unless="project.cleaned">
    <!-- Delete any existing artifacts from a previous build.
Do not delete builddir. It may contain the build file! -->
    <!--<delete dir="${project.toolsdir}"/> -->
    <delete dir="${project.coveragedir}"/>
    <delete dir="${project.logdir}"/>
    <delete dir="${project.testdir}"/>
    <!-- Verbose. We need to make sure any database is deleted. Reinstalling
the site with an existing database causes the build to fail. -->
    <delete file="${project.drupal.dir}/database.sqlite" verbose="true" />
    <!-- Remove leftover Drupal simpletest databases -->
    <delete>
      <fileset dir="${project.basedir}">
        <include name="database.sqlite-simpletest*"/>
      </fileset>
    </delete>

    <!-- Recreate directories for artifacts -->
    <mkdir dir="${project.toolsdir}"/>
    <mkdir dir="${project.coveragedir}"/>
    <mkdir dir="${project.logdir}"/>
    <mkdir dir="${project.testdir}"/>

    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.cleaned" value="true"/>
  </target>


  <!-- ### Download and enable a project/module -->
  <target name="enable-module"
          depends="setup-phing-drush">
    <!-- If project is not set then we assume that the module name is also
the project name. -->
    <property name="project" value="${module}" override="no"/>

    <!-- If the module is not already available then download it -->
    <drush command="pm-list" returnProperty="modules.available"/>
    <php function="strpos" returnProperty="module.available">
      <param>${modules.available}</param>
      <param>${module}</param>
    </php>
    <if>
      <not><istrue value="${module.available}"/></not>
      <then>
        <!-- Download specific version if specified -->
        <condition property="download" value="${project}-${project.version}">
          <isset property="project.version"/>
        </condition>
        <property name="download" value="${project}" override="false"/>

        <drush command="pm-download" assume="yes">
          <param>${download}</param>
        </drush>
      </then>
    </if>

    <!-- Enable the module -->
    <drush command="pm-enable" assume="yes">
      <param>${module}</param>
    </drush>
  </target>

  <!-- ### Clone a git repository -->
  <target name="setup-git-repo">
    <!-- Only clone if repository does not exist already -->
    <if>
      <not><available file="${repo.dir}" /></not>
      <then>
        <!-- Set revision to HEAD if not already defined -->
        <property name="repo.revision" value="HEAD" override="false"/>

        <echo>Cloning ${repo.url} ${repo.revision} into ${repo.dir}</echo>
        <!-- The [`gitclone` task](http://www.phing.info/docs/guide/stable/chapters/appendixes/AppendixC-OptionalTasks.html#GitCloneTask)
does not seem to work. Use exec instead. -->
        <exec command="git clone ${repo.url} ${repo.dir}" />
        <exec command="git checkout ${repo.revision}" dir="${repo.dir}"/>
      </then>
    </if>
  </target>

  

  <!-- ### Setup Phing Drush integration -->
  <target name="setup-phing-drush"
          depends="setup-dirs" >
    <!-- Clone the project -->
    <phingcall target="setup-git-repo">
      <property name="repo.dir"
                value="${project.toolsdir}/phing-drush"/>
      <property name="repo.url"
                value="${phing.drush.repository.url}" />
      <property name="repo.revision"
                value="${phing.drush.repository.revision}" />
    </phingcall>

    <!-- Register as custom Phing task -->
    <taskdef name="drush" classname="DrushTask"
             classpath="${project.toolsdir}/phing-drush" />

    <!-- Run drush from the project Drupal directory -->
    <property name="drush.root" value="${project.drupal.dir}"/>
  </target>

</project>